{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","event","preventDefault","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","response","json","data","gifs","map","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","useFecthGifs","image","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"yMAGaA,EAAc,SAAC,GAAwB,IAArBC,EAAoB,EAApBA,cAAoB,EAEXC,mBAAS,IAFE,mBAExCC,EAFwC,KAE5BC,EAF4B,KAgB/C,OACI,sBAAMC,SAbW,SAAAC,GACjBA,EAAMC,iBAENN,GAAc,SAAAO,GAAI,OAAKL,GAAL,mBAAoBK,OAEtCJ,EAAc,KAQd,SACI,uBAAOK,KAAK,OACRC,MAAQP,EACRQ,SARc,SAAAL,GACtBF,EAAcE,EAAMM,OAAOF,a,+BCGpBG,EAnBF,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,4DAEG,mCAETC,EAJM,uDAEG,mCAFH,cAI6DC,UAAUH,GAJvE,sBAMWI,MAAMF,GANjB,cAMNG,EANM,gBAQWA,EAASC,OARpB,uBAQJC,EARI,EAQJA,KAEFC,EAAOD,EAAKE,KAAK,YACnB,MAAQ,CACJC,GAF0E,EAAzDA,GAEbC,MAFsE,EAArDA,MAEVT,IAF+D,EAA7CU,OAAUC,iBAAoBX,QAVvD,kBAgBLM,GAhBK,4CAAH,sDCEAM,EAAc,SAAC,GAAwB,EAAtBJ,GAAuB,IAAnBC,EAAkB,EAAlBA,MAAQT,EAAU,EAAVA,IAEtC,OACI,sBAAKa,UAAU,0DAAf,UACI,qBAAKC,IAAKd,EAAKe,IAAKN,IACpB,4BAAKA,QCwBFO,EA1BC,SAAC,GAAoB,IAAjBlB,EAAgB,EAAhBA,SAAgB,ECFR,SAACA,GAAc,IAAD,EAEZZ,mBAAS,CAC/BmB,KAAM,GACNY,SAAS,IAJyB,mBAE/BC,EAF+B,KAExBC,EAFwB,KAoBtC,OAbAC,qBAAU,WAENvB,EAAQC,GAAUuB,MAAK,SAAAf,GAAI,MAAI,CAE3Ba,EAAS,CACLd,KAAMC,EACNW,SAAS,UAKlB,CAACnB,IAEGoB,EDhBsBI,CAAaxB,GAA9BQ,EAFoB,EAEzBD,KAAWY,EAFc,EAEdA,QAGlB,OACI,qCACI,6BAAMnB,IACLmB,GAAW,mBAAGJ,UAAU,oDAAb,wBAEV,oBAAIA,UAAU,YAAd,SAEMP,EAAKC,KAAK,SAAAgB,GAAK,OACX,cAAC,EAAD,eAAgCA,GAAdA,EAAMf,aEQjCgB,EAtBM,WAAO,IAAD,EAEatC,mBAAS,CAAC,kBAFvB,mBAEhBuC,EAFgB,KAEJxC,EAFI,KAIvB,OACI,qCACI,gDACA,uBAEA,cAAC,EAAD,CAAaA,cAAgBA,IAE7B,6BAEQwC,EAAWlB,KAAK,SAAAT,GAAQ,OAAI,cAAC,EAAD,CAA0BA,SAAUA,GAArBA,Y,MCZ/D4B,IAASC,OACP,cAAC,EAAD,IACCC,SAASC,eAAe,W","file":"static/js/main.06f28da2.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport PropTypes from \"prop-types\";\r\n\r\nexport const AddCategory = ( { setCategories} ) => {\r\n\r\n    const [inputValue, setInputValue] = useState(\"\");\r\n\r\n    const submitHandle = event => {\r\n        event.preventDefault();\r\n    \r\n        setCategories(cats => [inputValue, ...cats]);\r\n\r\n        setInputValue(\"\");\r\n    };\r\n\r\n    const changeInputHandle = event => {\r\n        setInputValue(event.target.value);\r\n    };\r\n\r\n    return (\r\n        <form onSubmit={ submitHandle }>\r\n            <input type=\"text\" \r\n                value={ inputValue } \r\n                onChange={ changeInputHandle } \r\n                />\r\n        </form>\r\n    );\r\n\r\n};\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n};\r\n\r\n\r\n","const getGifs = async (category) => {\r\n\r\n    const keyApi = \"wtJYpmdVufdl75zORD6pmTNwe1X62aXY\";\r\n\r\n    const url = `https://api.giphy.com/v1/gifs/search?api_key=${keyApi}&q=${ encodeURI(category) }&limit=10`;\r\n    \r\n    const response = await fetch(url);\r\n\r\n    const { data } = await response.json();\r\n    \r\n    const gifs = data.map( ({id, title,  images: { downsized_medium: { url } } } ) => {\r\n        return ({\r\n            id, title, url\r\n        });\r\n    });\r\n\r\n    return gifs;\r\n};\r\n\r\nexport default getGifs;","import React from 'react'\r\n\r\nexport const GifGridItem = ( {id, title,  url} ) => {\r\n    \r\n    return (\r\n        <div className=\"card animate__animated animate__fadeIn animate__delay-2\">\r\n            <img src={url} alt={title} />\r\n            <p>{ title }</p>\r\n        </div>\r\n    )\r\n}\r\n","import React, { useEffect, useState } from 'react';\r\nimport PropTypes from \"prop-types\";\r\nimport { useFecthGifs } from \"../hooks/useFetchGifs\";\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\nconst GifGrid = ( { category } ) => {\r\n\r\n    const {data:gifs, loading} = useFecthGifs(category);\r\n    \r\n\r\n    return (\r\n        <>\r\n            <h3>{ category }</h3>\r\n            {loading && <p className=\"animate__animated animate__flash animate__delay-2\">Loading...</p>}\r\n\r\n            { <ol className=\"card-grid\">\r\n                {\r\n                    gifs.map( image => (\r\n                        <GifGridItem key={image.id} {...image} />\r\n                    ))\r\n                }\r\n            </ol> }\r\n\r\n        </>\r\n    );\r\n}\r\n\r\nGifGrid.propTypes = {\r\n    category: PropTypes.string.isRequired\r\n};\r\n\r\nexport default GifGrid;","import { useEffect, useState } from 'react';\r\nimport getGifs from '../helpers/getGifs';\r\n\r\nexport const useFecthGifs = (category) => {\r\n\r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n\r\n    useEffect(() => {\r\n\r\n        getGifs(category).then(gifs => [\r\n\r\n            setState({\r\n                data: gifs,\r\n                loading: false\r\n            })\r\n\r\n        ]);\r\n\r\n    }, [category]);\r\n\r\n    return state;\r\n}\r\n","import React, { useState } from \"react\";\r\nimport { AddCategory } from \"./components/AddCategory\";\r\nimport GifGrid from \"./components/GifGrid\";\r\n\r\nconst GifExpertApp = () => {\r\n\r\n    const [categories, setCategories] = useState([\"One Punch Man\"]);\r\n\r\n    return (\r\n        <>\r\n            <h2>Gif Expert App</h2>\r\n            <hr />\r\n\r\n            <AddCategory setCategories={ setCategories } />\r\n\r\n            <ol>\r\n                {\r\n                    categories.map( category => <GifGrid key={ category } category={category} /> )\r\n                }\r\n            </ol>\r\n\r\n        </>\r\n    );\r\n\r\n};\r\n\r\nexport default GifExpertApp;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp';\nimport './index.css';\n\nReactDOM.render(\n  <GifExpertApp />,\n   document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}